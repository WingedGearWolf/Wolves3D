// Wolves 3D Website - Backend Structure
// Tech Stack: React (Next.js), Node.js (Express), PostgreSQL

const express = require('express');
const app = express();
const cors = require('cors');
const bodyParser = require('body-parser');
const multer = require('multer');
const session = require('express-session');
const stripe = require('stripe')('your-stripe-secret-key');
const paypal = require('@paypal/checkout-server-sdk');

app.use(cors());
app.use(bodyParser.json());

// Session setup for user authentication
app.use(session({
    secret: 'wolves3d_secret',
    resave: false,
    saveUninitialized: true,
}));

// Storage setup for file uploads (issue reporting)
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + '-' + file.originalname);
    }
});
const upload = multer({ storage: storage });

// Placeholder homepage route
app.get('/', (req, res) => {
    res.send('Welcome to Wolves 3D!');
});

// Route for handling user authentication
const users = [];
app.post('/signup', (req, res) => {
    const { username, password } = req.body;
    users.push({ username, password });
    res.status(201).json({ message: 'User registered successfully' });
});

app.post('/login', (req, res) => {
    const { username, password } = req.body;
    const user = users.find(u => u.username === username && u.password === password);
    if (user) {
        req.session.user = username;
        res.status(200).json({ message: 'Login successful' });
    } else {
        res.status(401).json({ message: 'Invalid credentials' });
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy();
    res.status(200).json({ message: 'Logout successful' });
});

// Shopping cart functionality
let cart = [];
app.post('/add-to-cart', (req, res) => {
    const { user, item } = req.body;
    cart.push({ user, item });
    res.status(200).json({ message: 'Item added to cart' });
});

app.get('/cart/:user', (req, res) => {
    const userCart = cart.filter(c => c.user === req.params.user);
    res.status(200).json(userCart);
});

app.post('/remove-from-cart', (req, res) => {
    const { user, item } = req.body;
    cart = cart.filter(c => !(c.user === user && c.item === item));
    res.status(200).json({ message: 'Item removed from cart' });
});

// Checkout with Stripe
app.post('/create-checkout-session', async (req, res) => {
    const session = await stripe.checkout.sessions.create({
        payment_method_types: ['card'],
        line_items: req.body.items,
        mode: 'payment',
        success_url: 'http://localhost:3000/success',
        cancel_url: 'http://localhost:3000/cancel',
    });
    res.json({ id: session.id });
});

// Checkout with PayPal
app.post('/create-paypal-order', async (req, res) => {
    try {
        const request = new paypal.orders.OrdersCreateRequest();
        request.requestBody({
            intent: 'CAPTURE',
            purchase_units: [{
                amount: {
                    currency_code: 'USD',
                    value: req.body.amount
                }
            }]
        });
        const response = await paypalClient.execute(request);
        res.json({ id: response.result.id });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Route for handling issue reports
app.post('/report-issue', upload.single('file'), (req, res) => {
    const { user, message } = req.body;
    const file = req.file ? req.file.filename : null;
    console.log(`Issue reported by ${user}: ${message}, File: ${file}`);
    res.status(200).json({ message: 'Issue report submitted successfully' });
});

app.listen(5000, () => {
    console.log('Server running on port 5000');
});
